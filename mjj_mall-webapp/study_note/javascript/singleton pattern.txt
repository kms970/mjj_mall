# Singleton Pattern

참고 문서: https://heecheolman.tistory.com/40

## 싱글톤 패턴이란?
- 전체 시스템에서 하나의 인스턴스만 존재하도록 보장하는 객체 생성패턴
- 동일 클래스로 new를 해도 인스턴스 하나만 존재한다는 것

## 특징
- 객체 자체에는 접근이 불가능
- 객체에 대한 접근자(비공개 멤버: 클로저)를 사용해 실제 객체를 제어할 수 있다.
- 객체는 단 하나만 만들어지며, 해당 객체를 공유함

## javascript에서는 객체 리터럴을 사용하면 싱굴턴을 구현 가능
- 객체는 캡슐화되어 있지 않기 때문에 결합도가 커짐
  + 데이터를 보호하는데 문제가 생길 수 있음
  + 리펙토링할 때도 효율적이지 않음

개발을 하다보면 어떤 클래스에 대해 단 하나의 인스턴스만을 갖도록 하는 것이 좋은 경우
-> 로그를 찍는 객체(Logging), 쓰레드 풀, 윈도우 관리자 등 여러 객체를 관리하는 역할의 객체는 프로그램 내에서
   단 하나의 인스턴스를 갖는게 바람직

일반적으로 전역으로 사용하는 상태를 관리하는 것에 싱글턴을 활용하면 좋을 것
"전역 변수" 또한 하나의 방법이지만, 이보다 더 좋은 방법은 클래스 자신이 자기의 유일한 인스턴스로 접근하는 방법을 자체적으로 관리

1. Eager Initialization
예제)
public class Singleton {
    private static final Singleton instance = new Singleton();

    prviate Singleton(){}

    public static Singleton getInstance(){
        return instance;
    }
}
클래스의 인스턴스를 클래스 로딩 단계에 생성하는 방법
싱글톤 클래스가 다소 적은 리소스를 다룰 때 유용
File System, Database Connection 등 큰 리소스들을 다루는 싱글톤을 구현할 때는 위와 같은 방식보다는
getInstance()메서드가 호출될 때까지 싱글톤 인스턴스를 생성하지 않는게 좋다.
Eager Initialization은 Exception에 대한 Handling도 제공하지 않음

2. Static Block Initialization
예제)
public class Singleton {
    private static Singleton instance;

    private Singleton(){}

    static{
        try{
            instance = new Singleton();
        }catch(Exception e){
            throw new RuntimeException("Exception ");
        }
    }

    public static Singleton getInstance(){
        return instance;
    }
}
Eager Initialization과 유사
Exception Handling에 대한 옵션을 제공
로딩 단계에서 인스턴스를 생성하기 때문에 여전히 큰 리소스를 다루는 경우에는 적합하지 않음


※ 클로저란? 따로 공부 필요


